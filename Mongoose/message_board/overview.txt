So the point here is setting up a more complicated series of models in Express, with validations and relationships between them.
The template will also have to be a little more complicated based on what comes back in the JSON result of the query. So we'll have to make that work out once we see what comes back from a joined query.
What do the models need to look like? No user model--user name will be in the message and the comment models separately. Instead we're looking at one for the messages, one for the comments. The two will be tied together.

So we'll need a rotue for displaying all messages with their associated comments, one for adding a message, one for adding a comment. The forms for the latter two will just be part of the main page.

The form for adding a comment to a message must have the url for that specific message included in its action attribute.

Okay, so here's the problem now. If error messages come back when we try to save the new entry, where do we put them?
  We could use session, I guess, to store the errors, but then how do we clear them when we're done? That's one of the things flash messages in Flask did well: clean up after themselves.
  An alternative is to have this route render index.ejs again, passing in a full query of the messages as well as the errors. But it feels like there has to be a way that doesn't involve a page load, and having multiple routes render the same template feels inelegant.
  But if we just have the error callback redirect back to the main page, we're only console.logging the errors, not providing them to the user. That may be the best we can do at this point.